// Плагин google-services должен быть перед firebase
plugins {
    id("com.android.application")
    id("dagger.hilt.android.plugin")
    id("kotlin-android")
    id("kotlin-kapt")
    id("kotlin-parcelize")
    id("kotlinx-serialization")
    id("androidx.navigation.safeargs.kotlin")
    id("com.google.gms.google-services")
    id("com.google.firebase.appdistribution")
    id("com.google.firebase.crashlytics")
    id("io.gitlab.arturbosch.detekt")
}

//apply from: "$project.rootDir/spotless.gradle"

// Для локальных сборок берем ключи из локального хранилища keystore.properties.
// Для удаленных сборок на GitHub Actions берем ключи из Actions Secrets.
// Каталог ../config отсутствует в удаленном репозитории.

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("config/keystore.properties")
if (keystorePropertiesFile.exists()) {
    println "Start extract release keystore config from keystore.properties"
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    println "Start extract release keystore config from global vars"
    keystoreProperties["keyAlias"] = System.env.KEYSTORE_KEY_ALIAS ?: ''
    keystoreProperties["keyPassword"] = System.env.KEYSTORE_KEY_PASSWORD ?: ''
    keystoreProperties["storePassword"] = System.env.KEYSTORE_STORE_PASSWORD ?: ''
    keystoreProperties["storeFile"] = System.env.KEYSTORE_FILE ?: ''
}

def appDistributionProperties = new Properties()
def appDistributionFile = rootProject.file("config/firebase-app-distribution.json")
if (appDistributionFile.exists()) {
    appDistributionProperties["path"] = "$rootDir/config/firebase-app-distribution.json"
} else {
    appDistributionProperties["path"] = System.env.FIREBASE_APP_DISTRIBUTION_FILE ?: ''
}

def generateVersionCode() {
    def result = "git rev-list HEAD --count".execute().text.trim() // unix
    if (result.empty) result = "PowerShell -Command git rev-list HEAD --count".execute().text.trim() // windows
    if (result.empty) throw new RuntimeException("Could not generate versioncode on this platform? Cmd output: ${result.text}")
    return result.toInteger()
}

android {
    compileSdk 31
    buildToolsVersion "31.0.0"

    defaultConfig {
        applicationId "org.michaelbel.template"
        minSdk 21
        targetSdk 31
        versionCode generateVersionCode()
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "androidx.benchmark.junit4.AndroidBenchmarkRunner"
        setProperty("archivesBaseName", "app" + "-v" + versionName + "(" + versionCode + ")")
    }

    signingConfigs {
        release {
            storeFile file(keystoreProperties["storeFile"])
            keyAlias keystoreProperties["keyAlias"]
            keyPassword keystoreProperties["keyPassword"]
            storePassword keystoreProperties["storePassword"]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"

            firebaseAppDistribution {
                appId = "1:33042426453:android:f766db4a18b6b79e9102dc" // google-services.json mobilesdk_app_id
                artifactType="APK"
                testers="michaelbel24865@gmail.com"
                releaseNotes="Release Build"
                serviceCredentialsFile = appDistributionFile["path"]
            }
        }
        debug {
            applicationIdSuffix = ".debug"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }

    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += [
            "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
            "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi",
            "-Xuse-experimental=androidx.paging.ExperimentalPagingApi",
            "-Xuse-experimental=androidx.compose.ui.ExperimentalComposeUiApi",
            "-Xuse-experimental=androidx.compose.material.ExperimentalMaterialApi",
            "-Xuse-experimental=androidx.compose.material3.ExperimentalMaterial3Api",
            "-Xuse-experimental=coil.annotation.ExperimentalCoilApi",
            "-Xuse-experimental=kotlinx.serialization.ExperimentalSerializationApi",
            "-Xopt-in=kotlinx.coroutines.FlowPreview"
        ]
    }

    composeOptions {
        kotlinCompilerExtensionVersion "1.1.0-rc01"
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
        reportDir = "$rootDir/test-reports"
        resultsDir = "$rootDir/test-results"
    }

    buildFeatures {
        compose true
        viewBinding true

        // Disable unused AGP features
        aidl false
        buildConfig false
        renderScript false
        resValues false
        shaders false
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
    }

    kapt {
        arguments {
            arg("dagger.formatGeneratedSource", "enabled") // Форматирование сгенерированного кода dagger
            arg("dagger.fastInit", "enabled") // Оптимизация сгенерированного кода для ускорения инициализации
            arg("dagger.fullBindingGraphValidation", "WARNING") // or ERROR, полная валидация графа
        }
    }
}

dependencies {
    implementation project(":core")
    implementation("com.google.dagger:hilt-android:2.40.5")
              kapt("com.google.dagger:hilt-compiler:2.40.5")

    implementation("com.squareup.moshi:moshi:1.12.0") // нужен переход на ksp
              kapt("com.squareup.moshi:moshi-kotlin-codegen:1.12.0")
    implementation("com.squareup.picasso:picasso:2.71828")
    implementation("com.github.kirich1409:viewbindingpropertydelegate:1.5.6")
    implementation("com.github.kirich1409:strict-mode-compat-ktx:30.2.0")
    implementation("com.vk:android-sdk-core:3.4.1")
    implementation("com.vk:android-sdk-api:3.4.1")
}